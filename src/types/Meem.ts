/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type MeemPermissionStruct = {
  permission: BigNumberish;
  addresses: string[];
  numTokens: BigNumberish;
  lockedBy: string;
};

export type MeemPermissionStructOutput = [
  number,
  string[],
  BigNumber,
  string
] & {
  permission: number;
  addresses: string[];
  numTokens: BigNumber;
  lockedBy: string;
};

export type SplitStruct = {
  toAddress: string;
  amount: BigNumberish;
  lockedBy: string;
};

export type SplitStructOutput = [string, BigNumber, string] & {
  toAddress: string;
  amount: BigNumber;
  lockedBy: string;
};

export type MeemPropertiesStruct = {
  totalChildren: BigNumberish;
  totalChildrenLockedBy: string;
  childrenPerWallet: BigNumberish;
  childrenPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStruct[];
  remixPermissions: MeemPermissionStruct[];
  readPermissions: MeemPermissionStruct[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStruct[];
  splitsLockedBy: string;
};

export type MeemPropertiesStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string,
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  string,
  string,
  string,
  SplitStructOutput[],
  string
] & {
  totalChildren: BigNumber;
  totalChildrenLockedBy: string;
  childrenPerWallet: BigNumber;
  childrenPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStructOutput[];
  remixPermissions: MeemPermissionStructOutput[];
  readPermissions: MeemPermissionStructOutput[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStructOutput[];
  splitsLockedBy: string;
};

export type MeemStruct = {
  owner: string;
  chain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  root: string;
  rootTokenId: BigNumberish;
  properties: MeemPropertiesStruct;
  childProperties: MeemPropertiesStruct;
};

export type MeemStructOutput = [
  string,
  number,
  string,
  BigNumber,
  string,
  BigNumber,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput
] & {
  owner: string;
  chain: number;
  parent: string;
  parentTokenId: BigNumber;
  root: string;
  rootTokenId: BigNumber;
  properties: MeemPropertiesStructOutput;
  childProperties: MeemPropertiesStructOutput;
};

export type PartStruct = { account: string; value: BigNumberish };

export type PartStructOutput = [string, BigNumber] & {
  account: string;
  value: BigNumber;
};

export type FacetCutStruct = {
  target: string;
  action: BigNumberish;
  selectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  target: string;
  action: number;
  selectors: string[];
};

export type FacetStruct = { target: string; selectors: BytesLike[] };

export type FacetStructOutput = [string, string[]] & {
  target: string;
  selectors: string[];
};

export interface MeemInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "childDepth()": FunctionFragment;
    "childrenOf(uint256)": FunctionFragment;
    "getMeem(uint256)": FunctionFragment;
    "mint(address,string,uint8,address,uint256,address,uint256,(int256,address,int256,address,(uint8,address[],uint256,address)[],(uint8,address[],uint256,address)[],(uint8,address[],uint256,address)[],address,address,address,(address,uint256,address)[],address),(int256,address,int256,address,(uint8,address[],uint256,address)[],(uint8,address[],uint256,address)[],(uint8,address[],uint256,address)[],address,address,address,(address,uint256,address)[],address))": FunctionFragment;
    "numChildrenOf(uint256)": FunctionFragment;
    "setChildDepth(uint256)": FunctionFragment;
    "setTokenCounter(uint256)": FunctionFragment;
    "tokenIdsOfOwner(address)": FunctionFragment;
    "addPermission(uint256,uint8,uint8,(uint8,address[],uint256,address))": FunctionFragment;
    "lockChildrenPerWallet(uint256)": FunctionFragment;
    "lockTotalChildren(uint256)": FunctionFragment;
    "removePermissionAt(uint256,uint8,uint8,uint256)": FunctionFragment;
    "setChildrenPerWallet(uint256,int256)": FunctionFragment;
    "setTotalChildren(uint256,int256)": FunctionFragment;
    "updatePermissionAt(uint256,uint8,uint8,uint256,(uint8,address[],uint256,address))": FunctionFragment;
    "addSplit(uint256,uint8,(address,uint256,address))": FunctionFragment;
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "nonOwnerSplitAllocationAmount()": FunctionFragment;
    "removeSplitAt(uint256,uint8,uint256)": FunctionFragment;
    "setNonOwnerSplitAllocationAmount(uint256)": FunctionFragment;
    "updateSplitAt(uint256,uint8,uint256,(address,uint256,address))": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getFallbackAddress()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFallbackAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "childDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childrenOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numChildrenOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPermission",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lockChildrenPerWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalChildren",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildrenPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalChildren",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePermissionAt",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      MeemPermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSplit",
    values: [BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonOwnerSplitAllocationAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childDepth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childrenOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockChildrenPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildrenPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "PropertiesSet(uint256,uint8,tuple)": EventFragment;
    "ChildrenPerWalletLocked(uint256,address)": EventFragment;
    "ChildrenPerWalletSet(uint256,int256)": EventFragment;
    "PermissionsSet(uint256,uint8,uint8,tuple[])": EventFragment;
    "TotalChildrenLocked(uint256,address)": EventFragment;
    "TotalChildrenSet(uint256,int256)": EventFragment;
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
    "SplitsSet(uint256,tuple[])": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildrenPerWalletLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildrenPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalChildrenLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalChildrenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; operator: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type PropertiesSetEvent = TypedEvent<
  [BigNumber, number, MeemPropertiesStructOutput],
  {
    tokenId: BigNumber;
    propertyType: number;
    props: MeemPropertiesStructOutput;
  }
>;

export type PropertiesSetEventFilter = TypedEventFilter<PropertiesSetEvent>;

export type ChildrenPerWalletLockedEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; lockedBy: string }
>;

export type ChildrenPerWalletLockedEventFilter =
  TypedEventFilter<ChildrenPerWalletLockedEvent>;

export type ChildrenPerWalletSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; newTotalChildren: BigNumber }
>;

export type ChildrenPerWalletSetEventFilter =
  TypedEventFilter<ChildrenPerWalletSetEvent>;

export type PermissionsSetEvent = TypedEvent<
  [BigNumber, number, number, MeemPermissionStructOutput[]],
  {
    tokenId: BigNumber;
    propertyType: number;
    permissionType: number;
    permission: MeemPermissionStructOutput[];
  }
>;

export type PermissionsSetEventFilter = TypedEventFilter<PermissionsSetEvent>;

export type TotalChildrenLockedEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; lockedBy: string }
>;

export type TotalChildrenLockedEventFilter =
  TypedEventFilter<TotalChildrenLockedEvent>;

export type TotalChildrenSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; newTotalChildren: BigNumber }
>;

export type TotalChildrenSetEventFilter =
  TypedEventFilter<TotalChildrenSetEvent>;

export type RoyaltiesSetEvent = TypedEvent<
  [BigNumber, PartStructOutput[]],
  { tokenId: BigNumber; royalties: PartStructOutput[] }
>;

export type RoyaltiesSetEventFilter = TypedEventFilter<RoyaltiesSetEvent>;

export type SplitsSetEvent = TypedEvent<
  [BigNumber, SplitStructOutput[]],
  { tokenId: BigNumber; splits: SplitStructOutput[] }
>;

export type SplitsSetEventFilter = TypedEventFilter<SplitsSetEvent>;

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { facetCuts: FacetCutStructOutput[]; target: string; data: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Meem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    childDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemStructOutput]>;

    mint(
      to: string,
      mTokenURI: string,
      chain: BigNumberish,
      parent: string,
      parentTokenId: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      mProperties: MeemPropertiesStruct,
      mChildProperties: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds_: BigNumber[] }>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalChildren(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalChildren(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PartStructOutput[]]>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { diamondFacets: FacetStructOutput[] }>;

    getFallbackAddress(overrides?: CallOverrides): Promise<[string]>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  childDepth(overrides?: CallOverrides): Promise<BigNumber>;

  childrenOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMeem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemStructOutput>;

  mint(
    to: string,
    mTokenURI: string,
    chain: BigNumberish,
    parent: string,
    parentTokenId: BigNumberish,
    root: string,
    rootTokenId: BigNumberish,
    mProperties: MeemPropertiesStruct,
    mChildProperties: MeemPropertiesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numChildrenOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setChildDepth(
    newChildDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCounter(
    tokenCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIdsOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addPermission(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockChildrenPerWallet(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalChildren(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildrenPerWallet(
    tokenId: BigNumberish,
    newTotalChildren: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalChildren(
    tokenId: BigNumberish,
    newTotalChildren: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSplit(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRaribleV2Royalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PartStructOutput[]>;

  nonOwnerSplitAllocationAmount(overrides?: CallOverrides): Promise<BigNumber>;

  removeSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonOwnerSplitAllocationAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: FacetCutStruct[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  getFallbackAddress(overrides?: CallOverrides): Promise<string>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFallbackAddress(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemStructOutput>;

    mint(
      to: string,
      mTokenURI: string,
      chain: BigNumberish,
      parent: string,
      parentTokenId: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      mProperties: MeemPropertiesStruct,
      mChildProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalChildren(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalChildren(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PartStructOutput[]>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    getFallbackAddress(overrides?: CallOverrides): Promise<string>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "PropertiesSet(uint256,uint8,tuple)"(
      tokenId?: null,
      propertyType?: null,
      props?: null
    ): PropertiesSetEventFilter;
    PropertiesSet(
      tokenId?: null,
      propertyType?: null,
      props?: null
    ): PropertiesSetEventFilter;

    "ChildrenPerWalletLocked(uint256,address)"(
      tokenId?: null,
      lockedBy?: null
    ): ChildrenPerWalletLockedEventFilter;
    ChildrenPerWalletLocked(
      tokenId?: null,
      lockedBy?: null
    ): ChildrenPerWalletLockedEventFilter;

    "ChildrenPerWalletSet(uint256,int256)"(
      tokenId?: null,
      newTotalChildren?: null
    ): ChildrenPerWalletSetEventFilter;
    ChildrenPerWalletSet(
      tokenId?: null,
      newTotalChildren?: null
    ): ChildrenPerWalletSetEventFilter;

    "PermissionsSet(uint256,uint8,uint8,tuple[])"(
      tokenId?: null,
      propertyType?: null,
      permissionType?: null,
      permission?: null
    ): PermissionsSetEventFilter;
    PermissionsSet(
      tokenId?: null,
      propertyType?: null,
      permissionType?: null,
      permission?: null
    ): PermissionsSetEventFilter;

    "TotalChildrenLocked(uint256,address)"(
      tokenId?: null,
      lockedBy?: null
    ): TotalChildrenLockedEventFilter;
    TotalChildrenLocked(
      tokenId?: null,
      lockedBy?: null
    ): TotalChildrenLockedEventFilter;

    "TotalChildrenSet(uint256,int256)"(
      tokenId?: null,
      newTotalChildren?: null
    ): TotalChildrenSetEventFilter;
    TotalChildrenSet(
      tokenId?: null,
      newTotalChildren?: null
    ): TotalChildrenSetEventFilter;

    "RoyaltiesSet(uint256,tuple[])"(
      tokenId?: null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
    RoyaltiesSet(tokenId?: null, royalties?: null): RoyaltiesSetEventFilter;

    "SplitsSet(uint256,tuple[])"(
      tokenId?: null,
      splits?: null
    ): SplitsSetEventFilter;
    SplitsSet(tokenId?: null, splits?: null): SplitsSetEventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      mTokenURI: string,
      chain: BigNumberish,
      parent: string,
      parentTokenId: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      mProperties: MeemPropertiesStruct,
      mChildProperties: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalChildren(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalChildren(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    childDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      mTokenURI: string,
      chain: BigNumberish,
      parent: string,
      parentTokenId: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      mProperties: MeemPropertiesStruct,
      mChildProperties: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalChildren(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalChildren(
      tokenId: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
