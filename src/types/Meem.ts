/* eslint-disable */
import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction, BaseContract, ContractTransaction, Overrides, PayableOverrides, CallOverrides, Event, Contract, utils } from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';


/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */







export type FacetCutStruct = {
  target: string;
  action: BigNumberish;
  selectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  target: string;
  action: number;
  selectors: string[];
};

export type FacetStruct = { target: string; selectors: BytesLike[] };

export type FacetStructOutput = [string, string[]] & {
  target: string;
  selectors: string[];
};

export type MeemPermissionStruct = {
  permission: BigNumberish;
  addresses: string[];
  numTokens: BigNumberish;
  lockedBy: string;
  costWei: BigNumberish;
};

export type MeemPermissionStructOutput = [
  number,
  string[],
  BigNumber,
  string,
  BigNumber
] & {
  permission: number;
  addresses: string[];
  numTokens: BigNumber;
  lockedBy: string;
  costWei: BigNumber;
};

export type SplitStruct = {
  toAddress: string;
  amount: BigNumberish;
  lockedBy: string;
};

export type SplitStructOutput = [string, BigNumber, string] & {
  toAddress: string;
  amount: BigNumber;
  lockedBy: string;
};

export type BasePropertiesStruct = {
  totalOriginalsSupply: BigNumberish;
  totalOriginalsSupplyLockedBy: string;
  mintPermissions: MeemPermissionStruct[];
  mintPermissionsLockedBy: string;
  splits: SplitStruct[];
  splitsLockedBy: string;
  originalsPerWallet: BigNumberish;
  originalsPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumberish;
  mintEndTimestamp: BigNumberish;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumberish;
  transferLockupUntilLockedBy: string;
};

export type BasePropertiesStructOutput = [
  BigNumber,
  string,
  MeemPermissionStructOutput[],
  string,
  SplitStructOutput[],
  string,
  BigNumber,
  string,
  boolean,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  totalOriginalsSupply: BigNumber;
  totalOriginalsSupplyLockedBy: string;
  mintPermissions: MeemPermissionStructOutput[];
  mintPermissionsLockedBy: string;
  splits: SplitStructOutput[];
  splitsLockedBy: string;
  originalsPerWallet: BigNumber;
  originalsPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumber;
  transferLockupUntilLockedBy: string;
};

export type MeemPropertiesStruct = {
  totalRemixes: BigNumberish;
  totalRemixesLockedBy: string;
  remixesPerWallet: BigNumberish;
  remixesPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStruct[];
  remixPermissions: MeemPermissionStruct[];
  readPermissions: MeemPermissionStruct[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStruct[];
  splitsLockedBy: string;
  totalCopies: BigNumberish;
  totalCopiesLockedBy: string;
  copiesPerWallet: BigNumberish;
  copiesPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumberish;
  mintEndTimestamp: BigNumberish;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumberish;
  transferLockupUntilLockedBy: string;
};

export type MeemPropertiesStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string,
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  string,
  string,
  string,
  SplitStructOutput[],
  string,
  BigNumber,
  string,
  BigNumber,
  string,
  boolean,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  totalRemixes: BigNumber;
  totalRemixesLockedBy: string;
  remixesPerWallet: BigNumber;
  remixesPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStructOutput[];
  remixPermissions: MeemPermissionStructOutput[];
  readPermissions: MeemPermissionStructOutput[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStructOutput[];
  splitsLockedBy: string;
  totalCopies: BigNumber;
  totalCopiesLockedBy: string;
  copiesPerWallet: BigNumber;
  copiesPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumber;
  transferLockupUntilLockedBy: string;
};

export type InitParamsStruct = {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStruct;
  defaultProperties: MeemPropertiesStruct;
  defaultChildProperties: MeemPropertiesStruct;
  admins: string[];
  tokenCounterStart: BigNumberish;
  childDepth: BigNumberish;
  nonOwnerSplitAllocationAmount: BigNumberish;
};

export type InitParamsStructOutput = [
  string,
  string,
  string,
  BasePropertiesStructOutput,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  string[],
  BigNumber,
  BigNumber,
  BigNumber
] & {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStructOutput;
  defaultProperties: MeemPropertiesStructOutput;
  defaultChildProperties: MeemPropertiesStructOutput;
  admins: string[];
  tokenCounterStart: BigNumber;
  childDepth: BigNumber;
  nonOwnerSplitAllocationAmount: BigNumber;
};

export type MeemMintParametersStruct = {
  to: string;
  tokenURI: string;
  parentChain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  meemType: BigNumberish;
  isURILocked: boolean;
  mintedBy: string;
  uriSource: BigNumberish;
  reactionTypes: string[];
};

export type MeemMintParametersStructOutput = [
  string,
  string,
  number,
  string,
  BigNumber,
  number,
  boolean,
  string,
  number,
  string[]
] & {
  to: string;
  tokenURI: string;
  parentChain: number;
  parent: string;
  parentTokenId: BigNumber;
  meemType: number;
  isURILocked: boolean;
  mintedBy: string;
  uriSource: number;
  reactionTypes: string[];
};

export type PartStruct = { account: string; value: BigNumberish };

export type PartStructOutput = [string, BigNumber] & {
  account: string;
  value: BigNumber;
};

export type ReactionStruct = { reaction: string; count: BigNumberish };

export type ReactionStructOutput = [string, BigNumber] & {
  reaction: string;
  count: BigNumber;
};

export type ContractInfoStruct = {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStruct;
  defaultProperties: MeemPropertiesStruct;
  defaultChildProperties: MeemPropertiesStruct;
  childDepth: BigNumberish;
  nonOwnerSplitAllocationAmount: BigNumberish;
};

export type ContractInfoStructOutput = [
  string,
  string,
  string,
  BasePropertiesStructOutput,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  BigNumber,
  BigNumber
] & {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStructOutput;
  defaultProperties: MeemPropertiesStructOutput;
  defaultChildProperties: MeemPropertiesStructOutput;
  childDepth: BigNumber;
  nonOwnerSplitAllocationAmount: BigNumber;
};

export type MeemStruct = {
  owner: string;
  parentChain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  rootChain: BigNumberish;
  root: string;
  rootTokenId: BigNumberish;
  generation: BigNumberish;
  properties: MeemPropertiesStruct;
  childProperties: MeemPropertiesStruct;
  mintedAt: BigNumberish;
  uriLockedBy: string;
  meemType: BigNumberish;
  mintedBy: string;
  uriSource: BigNumberish;
  reactionTypes: string[];
};

export type MeemStructOutput = [
  string,
  number,
  string,
  BigNumber,
  number,
  string,
  BigNumber,
  BigNumber,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  BigNumber,
  string,
  number,
  string,
  number,
  string[]
] & {
  owner: string;
  parentChain: number;
  parent: string;
  parentTokenId: BigNumber;
  rootChain: number;
  root: string;
  rootTokenId: BigNumber;
  generation: BigNumber;
  properties: MeemPropertiesStructOutput;
  childProperties: MeemPropertiesStructOutput;
  mintedAt: BigNumber;
  uriLockedBy: string;
  meemType: number;
  mintedBy: string;
  uriSource: number;
  reactionTypes: string[];
};

export type WrappedItemStruct = {
  chain: BigNumberish;
  contractAddress: string;
  tokenId: BigNumberish;
};

export type WrappedItemStructOutput = [number, string, BigNumber] & {
  chain: number;
  contractAddress: string;
  tokenId: BigNumber;
};

export interface MeemProxyV1Interface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getFallbackAddress()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFallbackAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "addressClippings(address)": FunctionFragment;
    "clip(uint256)": FunctionFragment;
    "clippings(uint256)": FunctionFragment;
    "hasAddressClipped(uint256,address)": FunctionFragment;
    "numClippings(uint256)": FunctionFragment;
    "unClip(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerTokens(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "init((string,string,string,(int256,address,(uint8,address[],uint256,address,uint256)[],address,(address,uint256,address)[],address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),address[],uint256,int256,uint256))": FunctionFragment;
    "addPermission(uint256,uint8,uint8,(uint8,address[],uint256,address,uint256))": FunctionFragment;
    "lockCopiesPerWallet(uint256,uint8)": FunctionFragment;
    "lockIsTransferrable(uint256)": FunctionFragment;
    "lockMintDates(uint256)": FunctionFragment;
    "lockPermissions(uint256,uint8,uint8)": FunctionFragment;
    "lockRemixesPerWallet(uint256,uint8)": FunctionFragment;
    "lockTotalCopies(uint256,uint8)": FunctionFragment;
    "lockTotalRemixes(uint256,uint8)": FunctionFragment;
    "lockTransferLockup(uint256)": FunctionFragment;
    "lockUri(uint256)": FunctionFragment;
    "removePermissionAt(uint256,uint8,uint8,uint256)": FunctionFragment;
    "setCopiesPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setData(uint256,string)": FunctionFragment;
    "setIsTransferrable(uint256,bool)": FunctionFragment;
    "setMintDates(uint256,int256,int256)": FunctionFragment;
    "setPermissions(uint256,uint8,uint8,(uint8,address[],uint256,address,uint256)[])": FunctionFragment;
    "setRemixesPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setTokenUri(uint256,string)": FunctionFragment;
    "setTotalCopies(uint256,uint8,int256)": FunctionFragment;
    "setTotalRemixes(uint256,uint8,int256)": FunctionFragment;
    "setTransferLockup(uint256,uint256)": FunctionFragment;
    "setURISource(uint256,uint8)": FunctionFragment;
    "updatePermissionAt(uint256,uint8,uint8,uint256,(uint8,address[],uint256,address,uint256))": FunctionFragment;
    "mint((address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address))": FunctionFragment;
    "mintAndCopy((address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),address)": FunctionFragment;
    "mintAndRemix((address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address))": FunctionFragment;
    "addSplit(uint256,uint8,(address,uint256,address))": FunctionFragment;
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "lockSplits(uint256,uint8)": FunctionFragment;
    "nonOwnerSplitAllocationAmount()": FunctionFragment;
    "removeSplitAt(uint256,uint8,uint256)": FunctionFragment;
    "setSplits(uint256,uint8,(address,uint256,address)[])": FunctionFragment;
    "updateSplitAt(uint256,uint8,uint256,(address,uint256,address))": FunctionFragment;
    "lockBaseSplits()": FunctionFragment;
    "lockMintPermissions()": FunctionFragment;
    "lockOriginalsPerWallet()": FunctionFragment;
    "lockTotalOriginalsSupply()": FunctionFragment;
    "reInitialize((string,string,string,(int256,address,(uint8,address[],uint256,address,uint256)[],address,(address,uint256,address)[],address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),address[],uint256,int256,uint256))": FunctionFragment;
    "setBaseSplits((address,uint256,address)[])": FunctionFragment;
    "setChildDepth(int256)": FunctionFragment;
    "setContractInfo(string,string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMintPermissions((uint8,address[],uint256,address,uint256)[])": FunctionFragment;
    "setNonOwnerSplitAllocationAmount(uint256)": FunctionFragment;
    "setOriginalsPerWallet(int256)": FunctionFragment;
    "setProperties(uint8,(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address))": FunctionFragment;
    "setTokenCounter(uint256)": FunctionFragment;
    "setTokenRoot(uint256,uint8,address,uint256)": FunctionFragment;
    "setTotalOriginalsSupply(int256)": FunctionFragment;
    "addReaction(uint256,string)": FunctionFragment;
    "getReactedAt(uint256,address,string)": FunctionFragment;
    "getReactions(uint256)": FunctionFragment;
    "removeReaction(uint256,string)": FunctionFragment;
    "setReactionTypes(uint256,string[])": FunctionFragment;
    "childDepth()": FunctionFragment;
    "copiesOf(uint256)": FunctionFragment;
    "getBaseProperties()": FunctionFragment;
    "getContractInfo()": FunctionFragment;
    "getDefaultProperties(uint8)": FunctionFragment;
    "getMeem(uint256)": FunctionFragment;
    "getRoles(bytes32)": FunctionFragment;
    "isNFTWrapped(uint8,address,uint256)": FunctionFragment;
    "numCopiesOf(uint256)": FunctionFragment;
    "numRemixesOf(uint256)": FunctionFragment;
    "ownedCopiesOf(uint256,address)": FunctionFragment;
    "ownedRemixesOf(uint256,address)": FunctionFragment;
    "remixesOf(uint256)": FunctionFragment;
    "tokenIdOfOwnerIndex(address,uint256)": FunctionFragment;
    "tokenIdsOfOwner(address)": FunctionFragment;
    "wrappedTokens((uint8,address,uint256)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressClippings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "clip", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "clippings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAddressClipped",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "numClippings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unClip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ownerTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addPermission",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCopiesPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockIsTransferrable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockMintDates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockRemixesPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalCopies",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalRemixes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTransferLockup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCopiesPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTransferrable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintDates",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemixesPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalCopies",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalRemixes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferLockup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setURISource",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePermissionAt",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      MeemPermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndCopy",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndRemix",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct,
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSplit",
    values: [BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSplits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonOwnerSplitAllocationAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplits",
    values: [BigNumberish, BigNumberish, SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBaseSplits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMintPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockOriginalsPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalOriginalsSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reInitialize",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseSplits",
    values: [SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPermissions",
    values: [MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginalsPerWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProperties",
    values: [BigNumberish, MeemPropertiesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoot",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalOriginalsSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactedAt",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReactionTypes",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "childDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "copiesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseProperties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultProperties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isNFTWrapped",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numCopiesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numRemixesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedCopiesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedRemixesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "remixesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdOfOwnerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokens",
    values: [WrappedItemStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressClippings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clippings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAddressClipped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numClippings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unClip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCopiesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockIsTransferrable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMintDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockRemixesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalRemixes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTransferLockup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCopiesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsTransferrable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemixesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalRemixes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferLockup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setURISource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndRemix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBaseSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockOriginalsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalOriginalsSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginalsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalOriginalsSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReactionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childDepth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copiesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNFTWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCopiesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRemixesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedCopiesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedRemixesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remixesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdOfOwnerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokens",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "MeemDiamondCreated()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemDiamondCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { facetCuts: FacetCutStructOutput[]; target: string; data: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type MeemDiamondCreatedEvent = TypedEvent<[], {}>;

export type MeemDiamondCreatedEventFilter =
  TypedEventFilter<MeemDiamondCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; operator: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MeemProxyV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeemProxyV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { diamondFacets: FacetStructOutput[] }>;

    getFallbackAddress(overrides?: CallOverrides): Promise<[string]>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockIsTransferrable()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockMintDates()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockTransferLockup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PartStructOutput[]]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockBaseSplits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockMintPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockOriginalsPerWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalOriginalsSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ReactionStructOutput[]]>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    childDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBaseProperties(
      overrides?: CallOverrides
    ): Promise<[BasePropertiesStructOutput]>;

    getContractInfo(
      overrides?: CallOverrides
    ): Promise<[ContractInfoStructOutput]>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemPropertiesStructOutput]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemStructOutput]>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds_: BigNumber[] }>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: FacetCutStruct[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  getFallbackAddress(overrides?: CallOverrides): Promise<string>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFallbackAddress(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressClippings(
    addy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  clip(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clippings(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasAddressClipped(
    tokenId: BigNumberish,
    addy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numClippings(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unClip(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPermission(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockCopiesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockIsTransferrable(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockIsTransferrable()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockMintDates(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockMintDates()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockRemixesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalCopies(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalRemixes(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockTransferLockup(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockTransferLockup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockUri(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCopiesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalCopies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setData(
    tokenId: BigNumberish,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIsTransferrable(uint256,bool)"(
    tokenId: BigNumberish,
    isTransferrable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIsTransferrable(bool)"(
    isTransferrable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMintDates(uint256,int256,int256)"(
    tokenId: BigNumberish,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMintDates(int256,int256)"(
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permissions: MeemPermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemixesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalRemixes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenUri(
    tokenId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalCopies(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalCopies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalRemixes(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalRemixes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTransferLockup(uint256,uint256)"(
    tokenId: BigNumberish,
    lockupUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTransferLockup(uint256)"(
    lockupUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURISource(
    tokenId: BigNumberish,
    uriSource: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndCopy(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    toCopyAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndRemix(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    remixParams: MeemMintParametersStruct,
    remixProperties: MeemPropertiesStruct,
    remixChildProperties: MeemPropertiesStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSplit(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRaribleV2Royalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PartStructOutput[]>;

  lockSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonOwnerSplitAllocationAmount(overrides?: CallOverrides): Promise<BigNumber>;

  removeSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    splits: SplitStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockBaseSplits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockMintPermissions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockOriginalsPerWallet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalOriginalsSupply(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reInitialize(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseSplits(
    splits: SplitStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildDepth(
    newChildDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractInfo(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintPermissions(
    permissions: MeemPermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonOwnerSplitAllocationAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOriginalsPerWallet(
    originalsPerWallet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProperties(
    propertyType: BigNumberish,
    props: MeemPropertiesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCounter(
    tokenCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoot(
    tokenId: BigNumberish,
    rootChain: BigNumberish,
    root: string,
    rootTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalOriginalsSupply(
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReaction(
    tokenId: BigNumberish,
    reaction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReactedAt(
    tokenId: BigNumberish,
    addy: string,
    reaction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReactions(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ReactionStructOutput[]>;

  removeReaction(
    tokenId: BigNumberish,
    reaction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReactionTypes(
    tokenId: BigNumberish,
    reactionTypes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  childDepth(overrides?: CallOverrides): Promise<BigNumber>;

  copiesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBaseProperties(
    overrides?: CallOverrides
  ): Promise<BasePropertiesStructOutput>;

  getContractInfo(overrides?: CallOverrides): Promise<ContractInfoStructOutput>;

  getDefaultProperties(
    propertyType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemPropertiesStructOutput>;

  getMeem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemStructOutput>;

  getRoles(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  isNFTWrapped(
    chain: BigNumberish,
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numCopiesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numRemixesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownedCopiesOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  ownedRemixesOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  remixesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokenIdOfOwnerIndex(
    _owner: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdsOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  wrappedTokens(
    items: WrappedItemStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    getFallbackAddress(overrides?: CallOverrides): Promise<string>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    clip(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unClip(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init(params: InitParamsStruct, overrides?: CallOverrides): Promise<void>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockIsTransferrable()"(overrides?: CallOverrides): Promise<void>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockMintDates()"(overrides?: CallOverrides): Promise<void>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockTransferLockup()"(overrides?: CallOverrides): Promise<void>;

    lockUri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PartStructOutput[]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lockBaseSplits(overrides?: CallOverrides): Promise<void>;

    lockMintPermissions(overrides?: CallOverrides): Promise<void>;

    lockOriginalsPerWallet(overrides?: CallOverrides): Promise<void>;

    lockTotalOriginalsSupply(overrides?: CallOverrides): Promise<void>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ReactionStructOutput[]>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBaseProperties(
      overrides?: CallOverrides
    ): Promise<BasePropertiesStructOutput>;

    getContractInfo(
      overrides?: CallOverrides
    ): Promise<ContractInfoStructOutput>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemPropertiesStructOutput>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemStructOutput>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;

    "MeemDiamondCreated()"(): MeemDiamondCreatedEventFilter;
    MeemDiamondCreated(): MeemDiamondCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockIsTransferrable()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockMintDates()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockTransferLockup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockBaseSplits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockMintPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockOriginalsPerWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalOriginalsSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseProperties(overrides?: CallOverrides): Promise<BigNumber>;

    getContractInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockIsTransferrable()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockMintDates()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockTransferLockup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockBaseSplits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockMintPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockOriginalsPerWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalOriginalsSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    childDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseProperties(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */



export interface TypedEvent<
  TArgsArray extends Array<any> = any,
  TArgsObject = any
> extends Event {
  args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
  extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;

export interface OnEvent<TRes> {
  <TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
    listener: TypedListener<TEvent>
  ): TRes;
  (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
  infer C,
  any
>
  ? C
  : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F["deploy"]>
  : never;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */





const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    name: "DiamondCut",
    type: "event",
    inputs: [
      {
        name: "facetCuts",
        type: "tuple[]",
        indexed: false,
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "action",
            type: "uint8",
            internalType: "enum IDiamondCuttable.FacetCutAction",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCuttable.FacetCut[]",
      },
      {
        name: "target",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    name: "MeemDiamondCreated",
    type: "event",
    inputs: [],
    anonymous: false,
  },
  {
    name: "OwnershipTransferred",
    type: "event",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    name: "acceptOwnership",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "diamondCut",
    type: "function",
    inputs: [
      {
        name: "facetCuts",
        type: "tuple[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "action",
            type: "uint8",
            internalType: "enum IDiamondCuttable.FacetCutAction",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCuttable.FacetCut[]",
      },
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "facetAddress",
    type: "function",
    inputs: [
      {
        name: "selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "facet",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "facetAddresses",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "addresses",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "facetFunctionSelectors",
    type: "function",
    inputs: [
      {
        name: "facet",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "selectors",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "facets",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "diamondFacets",
        type: "tuple[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getFallbackAddress",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "nomineeOwner",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "owner",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "setFallbackAddress",
    type: "function",
    inputs: [
      {
        name: "fallbackAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "supportsInterface",
    type: "function",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "transferOwnership",
    type: "function",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    name: "ADMIN_ROLE",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "MINTER_ROLE",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "grantRole",
    type: "function",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "hasRole",
    type: "function",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "revokeRole",
    type: "function",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "addressClippings",
    type: "function",
    inputs: [
      {
        name: "addy",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "clip",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "clippings",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "hasAddressClipped",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "addy",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "numClippings",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "unClip",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "Approval",
    type: "event",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    name: "ApprovalForAll",
    type: "event",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    name: "Transfer",
    type: "event",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    name: "approve",
    type: "function",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "balanceOf",
    type: "function",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "baseTokenURI",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    name: "burn",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "contractAddress",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "contractURI",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getApproved",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "isApprovedForAll",
    type: "function",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "name",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "onERC721Received",
    type: "function",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "ownerOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "ownerTokens",
    type: "function",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "safeTransferFrom",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "safeTransferFrom",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "setApprovalForAll",
    type: "function",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "status",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "symbol",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenByIndex",
    type: "function",
    inputs: [
      {
        name: "_index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokenId_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenOfOwnerByIndex",
    type: "function",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "_index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokenId_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenURI",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "totalSupply",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "totalSupply_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "transferFrom",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "init",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "contractURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "baseProperties",
            type: "tuple",
            components: [
              {
                name: "totalOriginalsSupply",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalOriginalsSupplyLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "mintPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "originalsPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "originalsPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct BaseProperties",
          },
          {
            name: "defaultProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "defaultChildProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "admins",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "tokenCounterStart",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "childDepth",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "nonOwnerSplitAllocationAmount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct InitParams",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "addPermission",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "permissionType",
        type: "uint8",
        internalType: "enum PermissionType",
      },
      {
        name: "permission",
        type: "tuple",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockCopiesPerWallet",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockIsTransferrable",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockMintDates",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockPermissions",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "permissionType",
        type: "uint8",
        internalType: "enum PermissionType",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockRemixesPerWallet",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockTotalCopies",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockTotalRemixes",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockTransferLockup",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockUri",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "removePermissionAt",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "permissionType",
        type: "uint8",
        internalType: "enum PermissionType",
      },
      {
        name: "idx",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setCopiesPerWallet",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "newTotalCopies",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setData",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setIsTransferrable",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "isTransferrable",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setMintDates",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "startTimestamp",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "endTimestamp",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setPermissions",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "permissionType",
        type: "uint8",
        internalType: "enum PermissionType",
      },
      {
        name: "permissions",
        type: "tuple[]",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setRemixesPerWallet",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "newTotalRemixes",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTokenUri",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "uri",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTotalCopies",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "newTotalCopies",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTotalRemixes",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "newTotalRemixes",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTransferLockup",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "lockupUntil",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setURISource",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "uriSource",
        type: "uint8",
        internalType: "enum URISource",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "updatePermissionAt",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "permissionType",
        type: "uint8",
        internalType: "enum PermissionType",
      },
      {
        name: "idx",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "permission",
        type: "tuple",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "mint",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "parentChain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "parent",
            type: "address",
            internalType: "address",
          },
          {
            name: "parentTokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "meemType",
            type: "uint8",
            internalType: "enum MeemType",
          },
          {
            name: "isURILocked",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "mintedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "uriSource",
            type: "uint8",
            internalType: "enum URISource",
          },
          {
            name: "reactionTypes",
            type: "string[]",
            internalType: "string[]",
          },
        ],
        internalType: "struct MeemMintParameters",
      },
      {
        name: "properties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
      {
        name: "childProperties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "mintAndCopy",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "parentChain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "parent",
            type: "address",
            internalType: "address",
          },
          {
            name: "parentTokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "meemType",
            type: "uint8",
            internalType: "enum MeemType",
          },
          {
            name: "isURILocked",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "mintedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "uriSource",
            type: "uint8",
            internalType: "enum URISource",
          },
          {
            name: "reactionTypes",
            type: "string[]",
            internalType: "string[]",
          },
        ],
        internalType: "struct MeemMintParameters",
      },
      {
        name: "properties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
      {
        name: "childProperties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
      {
        name: "toCopyAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "mintAndRemix",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "parentChain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "parent",
            type: "address",
            internalType: "address",
          },
          {
            name: "parentTokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "meemType",
            type: "uint8",
            internalType: "enum MeemType",
          },
          {
            name: "isURILocked",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "mintedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "uriSource",
            type: "uint8",
            internalType: "enum URISource",
          },
          {
            name: "reactionTypes",
            type: "string[]",
            internalType: "string[]",
          },
        ],
        internalType: "struct MeemMintParameters",
      },
      {
        name: "properties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
      {
        name: "childProperties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
      {
        name: "remixParams",
        type: "tuple",
        components: [
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "parentChain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "parent",
            type: "address",
            internalType: "address",
          },
          {
            name: "parentTokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "meemType",
            type: "uint8",
            internalType: "enum MeemType",
          },
          {
            name: "isURILocked",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "mintedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "uriSource",
            type: "uint8",
            internalType: "enum URISource",
          },
          {
            name: "reactionTypes",
            type: "string[]",
            internalType: "string[]",
          },
        ],
        internalType: "struct MeemMintParameters",
      },
      {
        name: "remixProperties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
      {
        name: "remixChildProperties",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "addSplit",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "split",
        type: "tuple",
        components: [
          {
            name: "toAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct Split",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "getRaribleV2Royalties",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        components: [
          {
            name: "account",
            type: "address",
            internalType: "address payable",
          },
          {
            name: "value",
            type: "uint96",
            internalType: "uint96",
          },
        ],
        internalType: "struct LibPart.Part[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "lockSplits",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "nonOwnerSplitAllocationAmount",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "removeSplitAt",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "idx",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setSplits",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "splits",
        type: "tuple[]",
        components: [
          {
            name: "toAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct Split[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "updateSplitAt",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "idx",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "split",
        type: "tuple",
        components: [
          {
            name: "toAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct Split",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockBaseSplits",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockIsTransferrable",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockMintDates",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockMintPermissions",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockOriginalsPerWallet",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockTotalOriginalsSupply",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "lockTransferLockup",
    type: "function",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "reInitialize",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "contractURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "baseProperties",
            type: "tuple",
            components: [
              {
                name: "totalOriginalsSupply",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalOriginalsSupplyLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "mintPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "originalsPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "originalsPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct BaseProperties",
          },
          {
            name: "defaultProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "defaultChildProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "admins",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "tokenCounterStart",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "childDepth",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "nonOwnerSplitAllocationAmount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct InitParams",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setBaseSplits",
    type: "function",
    inputs: [
      {
        name: "splits",
        type: "tuple[]",
        components: [
          {
            name: "toAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct Split[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setChildDepth",
    type: "function",
    inputs: [
      {
        name: "newChildDepth",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setContractInfo",
    type: "function",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setContractURI",
    type: "function",
    inputs: [
      {
        name: "newContractURI",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setIsTransferrable",
    type: "function",
    inputs: [
      {
        name: "isTransferrable",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setMintDates",
    type: "function",
    inputs: [
      {
        name: "startTimestamp",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "endTimestamp",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setMintPermissions",
    type: "function",
    inputs: [
      {
        name: "permissions",
        type: "tuple[]",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setNonOwnerSplitAllocationAmount",
    type: "function",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setOriginalsPerWallet",
    type: "function",
    inputs: [
      {
        name: "originalsPerWallet",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setProperties",
    type: "function",
    inputs: [
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
      {
        name: "props",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTokenCounter",
    type: "function",
    inputs: [
      {
        name: "tokenCounter",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTokenRoot",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "rootChain",
        type: "uint8",
        internalType: "enum Chain",
      },
      {
        name: "root",
        type: "address",
        internalType: "address",
      },
      {
        name: "rootTokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTotalOriginalsSupply",
    type: "function",
    inputs: [
      {
        name: "totalSupply",
        type: "int256",
        internalType: "int256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setTransferLockup",
    type: "function",
    inputs: [
      {
        name: "lockupUntil",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "addReaction",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reaction",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "getReactedAt",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "addy",
        type: "address",
        internalType: "address",
      },
      {
        name: "reaction",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getReactions",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        components: [
          {
            name: "reaction",
            type: "string",
            internalType: "string",
          },
          {
            name: "count",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct Reaction[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "removeReaction",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reaction",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setReactionTypes",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reactionTypes",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "childDepth",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "copiesOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getBaseProperties",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        components: [
          {
            name: "totalOriginalsSupply",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalOriginalsSupplyLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "mintPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "originalsPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "originalsPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct BaseProperties",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getContractInfo",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        components: [
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "contractURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "baseProperties",
            type: "tuple",
            components: [
              {
                name: "totalOriginalsSupply",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalOriginalsSupplyLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "mintPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "originalsPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "originalsPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct BaseProperties",
          },
          {
            name: "defaultProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "defaultChildProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "childDepth",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "nonOwnerSplitAllocationAmount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct ContractInfo",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getDefaultProperties",
    type: "function",
    inputs: [
      {
        name: "propertyType",
        type: "uint8",
        internalType: "enum PropertyType",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        components: [
          {
            name: "totalRemixes",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalRemixesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "remixesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copyPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "remixPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "readPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "copyPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "remixPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "readPermissionsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "splitsLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalCopies",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "totalCopiesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "copiesPerWallet",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "copiesPerWalletLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "isTransferrable",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "isTransferrableLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintStartTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintEndTimestamp",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "mintDatesLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "transferLockupUntil",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "transferLockupUntilLockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct MeemProperties",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getMeem",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "parentChain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "parent",
            type: "address",
            internalType: "address",
          },
          {
            name: "parentTokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "rootChain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "root",
            type: "address",
            internalType: "address",
          },
          {
            name: "rootTokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "generation",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "properties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "childProperties",
            type: "tuple",
            components: [
              {
                name: "totalRemixes",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalRemixesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "remixesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copyPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "remixPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "readPermissions",
                type: "tuple[]",
                components: [
                  {
                    name: "permission",
                    type: "uint8",
                    internalType: "enum Permission",
                  },
                  {
                    name: "addresses",
                    type: "address[]",
                    internalType: "address[]",
                  },
                  {
                    name: "numTokens",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "costWei",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
                internalType: "struct MeemPermission[]",
              },
              {
                name: "copyPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "remixPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "readPermissionsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "splits",
                type: "tuple[]",
                components: [
                  {
                    name: "toAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "amount",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "lockedBy",
                    type: "address",
                    internalType: "address",
                  },
                ],
                internalType: "struct Split[]",
              },
              {
                name: "splitsLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "totalCopies",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "totalCopiesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "copiesPerWallet",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "copiesPerWalletLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "isTransferrable",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "isTransferrableLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "mintStartTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintEndTimestamp",
                type: "int256",
                internalType: "int256",
              },
              {
                name: "mintDatesLockedBy",
                type: "address",
                internalType: "address",
              },
              {
                name: "transferLockupUntil",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "transferLockupUntilLockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct MeemProperties",
          },
          {
            name: "mintedAt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "uriLockedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "meemType",
            type: "uint8",
            internalType: "enum MeemType",
          },
          {
            name: "mintedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "uriSource",
            type: "uint8",
            internalType: "enum URISource",
          },
          {
            name: "reactionTypes",
            type: "string[]",
            internalType: "string[]",
          },
        ],
        internalType: "struct Meem",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getRoles",
    type: "function",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "isNFTWrapped",
    type: "function",
    inputs: [
      {
        name: "chain",
        type: "uint8",
        internalType: "enum Chain",
      },
      {
        name: "contractAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "numCopiesOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "numRemixesOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "ownedCopiesOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "ownedRemixesOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "remixesOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenIdOfOwnerIndex",
    type: "function",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenIdsOfOwner",
    type: "function",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "tokenIds_",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "wrappedTokens",
    type: "function",
    inputs: [
      {
        name: "items",
        type: "tuple[]",
        components: [
          {
            name: "chain",
            type: "uint8",
            internalType: "enum Chain",
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct WrappedItem[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
];

export class MeemProxyV1__factory {
  static readonly abi = _abi;
  static createInterface(): MeemProxyV1Interface {
    return new utils.Interface(_abi) as MeemProxyV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MeemProxyV1 {
    return new Contract(address, _abi, signerOrProvider) as MeemProxyV1;
  }
}
