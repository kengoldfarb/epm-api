{
  "openapi": "3.0.0",
  "info": {
    "title": "Meem API",
    "description": "Meem Protocol REST API.",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.meem.wtf/api/1.0",
      "description": "Main (production) API"
    },
    {
      "url": "https://dev-api.meem.wtf/api/1.0",
      "description": "Development server for testing"
    }
  ],
  "components": {
    "securitySchemes": {
      "jwtAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Specify the token value with the `JWT` prefix, e.g. \"JWT xxxxx\""
      }
    },
    "schemas": {
      "BulkMintAgreementRoleTokensRequestBody": {
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "description": "The token",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "to"
              ],
              "properties": {
                "metadata": {
                  "description": "The token metadata",
                  "type": "object"
                },
                "to": {
                  "description": "The address where the token will be minted",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BulkMintAgreementTokensRequestBody": {
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "description": "The token",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "to"
              ],
              "properties": {
                "metadata": {
                  "description": "The token metadata",
                  "type": "object"
                },
                "to": {
                  "description": "The address where the token will be minted",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreateAgreementExtensionRequestBody": {
        "required": [
          "extensionId"
        ],
        "properties": {
          "extensionId": {
            "description": "The id of the extension to enable",
            "type": "string"
          },
          "metadata": {
            "description": "Optional metadata associated with this extension",
            "type": "object"
          },
          "externalLink": {
            "description": "Optional external link associated with this extension",
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "description": "The URL for the link",
                "type": "string"
              },
              "label": {
                "description": "The link label",
                "type": "string"
              },
              "visibility": {
                "description": "Set the visibility type of the user identity integration",
                "type": "string",
                "default": "token-holders",
                "enum": [
                  "just-me",
                  "token-holders",
                  "anyone"
                ]
              }
            }
          },
          "widget": {
            "description": "Optional widget data associated with this extension",
            "type": "object",
            "properties": {
              "metadata": {
                "description": "Metadata associated with the extension widget",
                "type": "object"
              },
              "visibility": {
                "description": "Set the visibility type of the user identity integration",
                "type": "string",
                "default": "token-holders",
                "enum": [
                  "just-me",
                  "token-holders",
                  "anyone"
                ]
              }
            }
          }
        }
      },
      "CreateAgreementRequestBody": {
        "required": [
          "name",
          "metadata",
          "chainId",
          "maxSupply"
        ],
        "properties": {
          "name": {
            "description": "The name of the contract",
            "type": "string",
            "example": "My Agreement"
          },
          "metadata": {
            "description": "The contract metadata `IMeemMetadataLike`",
            "type": "object"
          },
          "chainId": {
            "description": "The contract chain id",
            "type": "integer",
            "example": 421613
          },
          "maxSupply": {
            "description": "The max number of tokens",
            "type": "string"
          },
          "isMaxSupplyLocked": {
            "description": "Is the max number of tokens locked",
            "type": "boolean"
          },
          "symbol": {
            "description": "The contract symbol. If omitted, will use slug generated from name.",
            "type": "string"
          },
          "admins": {
            "description": "Contract admin addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minters": {
            "description": "Special minter permissions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mintPermissions": {
            "description": "Minting permissions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "splits": {
            "description": "Splits for minting / transfers",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isTransferLocked": {
            "description": "Whether tokens can be transferred",
            "type": "boolean"
          },
          "shouldMintTokens": {
            "description": "If true, will mint a token to the admin wallet addresses and any addresses in the members parameter.",
            "type": "boolean"
          },
          "members": {
            "description": "Additional non-admin member addresses that will receive tokens if shouldMintTokens is true",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenMetadata": {
            "description": "Token metadata to use if shouldMintTokens is true",
            "type": "object"
          }
        }
      },
      "CreateAgreementRoleRequestBody": {
        "required": [
          "name",
          "metadata",
          "maxSupply"
        ],
        "properties": {
          "name": {
            "description": "The name of the contract",
            "type": "string",
            "example": "My Agreement Role"
          },
          "metadata": {
            "description": "The contract metadata `IMeemMetadataLike`",
            "type": "object"
          },
          "maxSupply": {
            "description": "The max number of tokens",
            "type": "string"
          },
          "isMaxSupplyLocked": {
            "description": "Is the max number of tokens locked",
            "type": "boolean"
          },
          "symbol": {
            "description": "The contract symbol. If omitted, will use slug generated from name.",
            "type": "string"
          },
          "splits": {
            "description": "Splits for minting / transfers",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isTransferLocked": {
            "description": "Whether tokens can be transferred",
            "type": "boolean"
          },
          "shouldMintTokens": {
            "description": "If true, will mint a token to the admin wallet addresses and any addresses in the members parameter.",
            "type": "boolean"
          },
          "members": {
            "description": "Additional non-admin member addresses that will receive tokens if shouldMintTokens is true",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenMetadata": {
            "description": "Token metadata to use if shouldMintTokens is true",
            "type": "object"
          }
        }
      },
      "CreateAgreementSafeRequestBody": {
        "required": [
          "safeOwners",
          "chainId"
        ],
        "properties": {
          "safeOwners": {
            "description": "Addresses of the safe owners",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "chainId": {
            "description": "Chain id of the safe",
            "type": "integer",
            "example": 421613
          },
          "threshold": {
            "description": "The number of signatures required",
            "type": "integer",
            "example": 2
          }
        }
      },
      "CreateOrUpdateUserRequestBody": {
        "properties": {
          "profilePicBase64": {
            "description": "Profile picture base64 string",
            "type": "string"
          },
          "displayName": {
            "description": "Display name of identity",
            "type": "string"
          }
        }
      },
      "DefaultStatusResponseBody": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The response status.",
            "type": "string"
          }
        }
      },
      "IsAgreementSlugAvailableRequestBody": {
        "required": [
          "slug",
          "chainId"
        ],
        "properties": {
          "slug": {
            "description": "New agreement slug to check",
            "type": "string",
            "example": "my-agreement"
          },
          "chainId": {
            "description": "The chain id of new agreement. Agreement slugs are unique to the chain of the agreement contract.",
            "type": "integer",
            "example": 421613
          }
        }
      },
      "LoginRequestBody": {
        "properties": {
          "accessToken": {
            "description": "Login w/ access token provided by Auth0 magic link",
            "type": "string"
          },
          "address": {
            "description": "Login w/ wallet. Both address and signature must be provided",
            "type": "string"
          },
          "signature": {
            "description": "Login w/ wallet. Both address and signature must be provided",
            "type": "string"
          },
          "shouldConnectUser": {
            "description": "Whether to connect the login method with the currently authenticated user",
            "type": "boolean"
          }
        }
      },
      "ReinitializeAgreementRequestBody": {
        "properties": {
          "name": {
            "description": "The name of the contract",
            "type": "string",
            "example": "My Agreement"
          },
          "metadata": {
            "description": "The contract metadata `IMeemMetadataLike`",
            "type": "object"
          },
          "maxSupply": {
            "description": "The max number of tokens",
            "type": "string"
          },
          "symbol": {
            "description": "The contract symbol. If omitted, will use slug generated from name.",
            "type": "string"
          },
          "admins": {
            "description": "Contract admin addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minters": {
            "description": "Special minter permissions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mintPermissions": {
            "description": "Minting permissions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "splits": {
            "description": "Splits for minting / transfers",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isTransferLocked": {
            "description": "Whether tokens can be transferred",
            "type": "boolean"
          }
        }
      },
      "ReinitializeAgreementRoleRequestBody": {
        "properties": {
          "name": {
            "description": "The name of the contract",
            "type": "string",
            "example": "My Agreement"
          },
          "metadata": {
            "description": "The contract metadata `IMeemMetadataLike`",
            "type": "object"
          },
          "maxSupply": {
            "description": "The max number of tokens",
            "type": "string"
          },
          "symbol": {
            "description": "The contract symbol. If omitted, will use slug generated from name.",
            "type": "string"
          },
          "splits": {
            "description": "Splits for minting / transfers",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isTransferLocked": {
            "description": "Whether tokens can be transferred",
            "type": "boolean"
          }
        }
      },
      "SetAgreementSafeAddressRequestBody": {
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "description": "The number of signatures required",
            "type": "string",
            "example": 0
          },
          "chainId": {
            "description": "Chain id of the safe",
            "type": "integer",
            "example": 421613
          }
        }
      },
      "SetAgreemetAdminRoleRequestBody": {
        "required": [
          "address"
        ],
        "properties": {
          "adminAgreementRoleId": {
            "description": "The id of the agreement role to set as admin role",
            "type": "string"
          }
        }
      },
      "UpdateAgreementExtensionRequestBody": {
        "properties": {
          "metadata": {
            "description": "Optional metadata associated with this extension",
            "type": "object"
          },
          "externalLink": {
            "description": "Optional external link associated with this extension",
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "description": "The URL for the link",
                "type": "string"
              },
              "label": {
                "description": "The link label",
                "type": "string"
              },
              "isEnabled": {
                "description": "Whether link should be enabled",
                "type": "boolean"
              },
              "visibility": {
                "description": "Set the visibility type of the extension link",
                "type": "string",
                "default": "token-holders",
                "enum": [
                  "just-me",
                  "token-holders",
                  "anyone"
                ]
              }
            }
          },
          "widget": {
            "description": "Optional widget data associated with this extension",
            "type": "object",
            "properties": {
              "metadata": {
                "description": "Metadata associated with the extension widget",
                "type": "object"
              },
              "isEnabled": {
                "description": "Whether widget should be enabled",
                "type": "boolean"
              },
              "visibility": {
                "description": "Set the visibility type of the extension widget",
                "type": "string",
                "default": "token-holders",
                "enum": [
                  "just-me",
                  "token-holders",
                  "anyone"
                ]
              }
            }
          }
        }
      },
      "UpdateUserIdentityRequestBody": {
        "properties": {
          "visibility": {
            "description": "Set the visibility type of the user identity integration",
            "type": "string",
            "default": "token-holders",
            "enum": [
              "just-me",
              "token-holders",
              "anyone"
            ]
          },
          "metadata": {
            "description": "Metadata associated with this user identity integration",
            "type": "string"
          }
        }
      },
      "UpgradeAgreementRequestBody": {
        "properties": {
          "bundleId": {
            "description": "Specify the bundle id to upgrade to. Defaults to latest Agreements bundle",
            "type": "string"
          }
        }
      },
      "UpgradeAgreementRoleRequestBody": {
        "properties": {
          "bundleId": {
            "description": "Specify the bundle id to upgrade to. Defaults to latest Agreements bundle",
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/agreements": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Create an agreement contract.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgreementRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if create agreement transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deployContractTxId": {
                      "type": "string",
                      "description": "The transaction id for deploying the contract. Transaction"
                    },
                    "cutTxId": {
                      "type": "string",
                      "description": "The transaction id for initializing the contract. Transaction"
                    },
                    "mintTxId": {
                      "type": "string",
                      "description": "The transaction id for minting tokens. Transaction"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/isSlugAvailable": {
      "post": {
        "summary": "Check if agreement slug is available",
        "description": "When creating a new agreement contract, you can specify the slug that is stored in the Meem indexer database. This endpoint will allow you to see if a slug is avilable before creating the agreement contract.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IsAgreementSlugAvailableRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the agreement minting proof",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isSlugAvailable": {
                      "description": "Whether this slug is available",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}": {
      "get": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Get agreement minting proof",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the agreement minting proof",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proof": {
                      "description": "Agreement minting proof as array of hex strings",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/bulkMint": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Bulk mint agreement tokens",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMintAgreementTokensRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if bulk mint transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/extensions": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Create an agreement extension",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgreementExtensionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if bulk mint transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatusResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/extensions/{agreementExtensionId}": {
      "put": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Update an agreement extension",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "agreementExtensionId",
            "required": true,
            "description": "The agreement extension id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgreementExtensionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if bulk mint transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatusResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/reinitialize": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Reinitialize an agreement contract.",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement to reinitialize",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReinitializeAgreementRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if reinitialize agreement transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/roles": {
      "get": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "TODO: Get all roles for an agreement",
        "description": "TODO: define the IAgreemeentRole role schema",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the agreement role",
            "content": {
              "application/json": {
                "schema": {
                  "description": "IAgreemeentRole[]",
                  "type": "array",
                  "items": {
                    "description": "IAgreemeentRole",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Create an agreement role contract",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement to create a role for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgreementRoleRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if create agreement transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deployContractTxId": {
                      "type": "string",
                      "description": "The transaction id for deploying the contract. Transaction"
                    },
                    "cutTxId": {
                      "type": "string",
                      "description": "The transaction id for initializing the contract. Transaction"
                    },
                    "mintTxId": {
                      "type": "string",
                      "description": "The transaction id for minting tokens. Transaction"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/roles/{agreementRoleId}": {
      "get": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "TODO: Get an agreement role",
        "description": "TODO: define the IAgreemeentRole role schema",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "agreementRoleId",
            "required": true,
            "description": "The id of the agreement role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the agreement role",
            "content": {
              "application/json": {
                "schema": {
                  "description": "IAgreemeentRole",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "TODO: Delete an agreement role.",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "agreementRoleId",
            "required": true,
            "description": "The id of the agreement role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 'success' if create agreement transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatusResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/roles/{agreementRoleId}/bulkMint": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Bulk mint agreement role tokens",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "agreementRoleId",
            "required": true,
            "description": "The id of the agreement role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMintAgreementRoleTokensRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if bulk mint transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/roles/{agreementRoleId}/reinitialize": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Reinitialize an agreement role contract.",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "agreementRoleId",
            "required": true,
            "description": "The id of the agreement role to reinitialize",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReinitializeAgreementRoleRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if reinitialize agreement transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/safe": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Create an agreement safe",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgreementSafeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if safe is successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Create an agreement safe",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAgreementSafeAddressRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if safe is successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatusResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/setAdminRole": {
      "patch": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Set the agreement admin role",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAgreemetAdminRoleRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if admin role was successfully set.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{agreementId}/upgrade": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Upgrade an agreement contract.",
        "parameters": [
          {
            "in": "path",
            "name": "agreementId",
            "required": true,
            "description": "The id of the agreement",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "agreementRoleId",
            "required": true,
            "description": "The id of the agreement role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeAgreementRoleRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns 'success' if upgrade agreement transaction is executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "The transaction id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getNonce": {
      "get": {
        "summary": "Generate nonce for client to sign and verify a user's wallet address",
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "required": true,
            "description": "The wallet address that will sign the message",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a generated message to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nonce": {
                      "description": "The generated message to sign",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Log in a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a jwt token for the logged-in user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jwt": {
                      "description": "JWT that can be used for future authentication",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "summary": "Get the current authenticated user",
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the authenticated user's information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "walletId": {
                      "description": "The authenticated user's wallet id",
                      "type": "string"
                    },
                    "address": {
                      "description": "The authenticated user's wallet address",
                      "type": "string"
                    },
                    "user": {
                      "description": "The authenticated user",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Create or update the current user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a generated message to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "description": "The new or updated user",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/integrations/{integrationId}": {
      "post": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Update current user identity",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "description": "The user identity integration id to connect or update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserIdentityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a generated message to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userIdentity": {
                      "description": "The new or updated user identity",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Remove a user identity integration from the current user identity",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "description": "The user identity integration id to remove",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 'success' if user identity integration was removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatusResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/me/refreshENS": {
      "get": {
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "summary": "Refresh the ENS name for the current user's wallet address",
        "responses": {
          "200": {
            "description": "Returns 'success' if ENS was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatusResponseBody"
                }
              }
            }
          }
        }
      }
    }
  }
}
